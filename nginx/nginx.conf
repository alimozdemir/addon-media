worker_processes  auto;

events { worker_connections  1024; }

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    tcp_nopush      on;
    keepalive_timeout  65;
    gzip on;
    gunzip on;

    # Normalize ingress path
    map $http_x_ingress_path $path_prefix {
        default "";
        ~^/$ "";
        ~^(.+?)/$ $1;
        ~^(.+)$ $1;
    }

    # Upgrade header helper for websockets
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Derive prefix from request URI when header is not present
    map $request_uri $ingress_prefix {
        ~^(/api/hassio_ingress/[^/]+) $1;
        default "";
    }

    # Effective prefix prefers header, falls back to ingress path from URI
    map $path_prefix $effective_prefix {
        default $path_prefix;
        ""      $ingress_prefix;
    }

    upstream nuxt_upstream {
        server 127.0.0.1:3000;
        keepalive 64;
    }

    server {
        listen       80 default_server;
        server_name  _;

        # Substitutions for HTML/JS/JSON
        sub_filter_once off;
        sub_filter_types text/html application/javascript text/javascript application/json;
        sub_filter 'href="/' 'href="$effective_prefix/';
        sub_filter 'src="/' 'src="$effective_prefix/';
        sub_filter '"baseURL":"/' '"baseURL":"$effective_prefix/';
        # Rewrite absolute "/_nuxt" strings inside JS/JSON payloads
        sub_filter '"/_nuxt/' '"$effective_prefix/_nuxt/';
        sub_filter "'/_nuxt/" "'$effective_prefix/_nuxt/";
        sub_filter '/_nuxt/builds/meta/' '$effective_prefix/_nuxt/builds/meta/';

        # Handle Home Assistant ingress path: /api/hassio_ingress/<token>/...
        # Strip the ingress prefix and proxy the remainder to Nuxt
        location ~ ^/api/hassio_ingress/[^/]+/?(.*)$ {
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            # Apply same substitutions
            sub_filter_once off;
            sub_filter_types text/html application/javascript text/javascript application/json;
            sub_filter 'href="/' 'href="$effective_prefix/';
            sub_filter 'src="/' 'src="$effective_prefix/';
            sub_filter '"baseURL":"/' '"baseURL":"$effective_prefix/';
            sub_filter '"/_nuxt/' '"$effective_prefix/_nuxt/';
            sub_filter "'/_nuxt/" "'$effective_prefix/_nuxt/";
            sub_filter '/_nuxt/builds/meta/' '$effective_prefix/_nuxt/builds/meta/';

            # Rewrite upstream redirects to include effective prefix
            proxy_redirect ~^(/.*)$ $effective_prefix$1;

            # Strip ingress prefix and pass remaining path as-is
            rewrite ^/api/hassio_ingress/[^/]+(/.*)$ $1 break;
            proxy_pass http://nuxt_upstream;
        }

        location / {
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            # Rewrite upstream redirects to include effective prefix (no-op if empty)
            proxy_redirect ~^(/.*)$ $effective_prefix$1;

            proxy_pass http://nuxt_upstream;
        }
    }
}


